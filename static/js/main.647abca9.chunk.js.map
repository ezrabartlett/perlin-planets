{"version":3,"sources":["assets/textures/threeTone.jpg","helpers/RandomNumberGenorator.tsx","helpers/TerrainGenerator.tsx","helpers/PlanetGeometry.tsx","shaders/planetVertex.js","shaders/planetFragment.js","shaders/atmosphere/atmosphereFragment.js","shaders/atmosphere/atmosphereVertex.js","system-objects/Moon.tsx","system-objects/Planet.tsx","system-objects/Sun.tsx","system-objects/StarSystem.tsx","player-objects/Ship.tsx","helpers/ThirdPersonCamera.tsx","Scene.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","RandomNumberGenerator","seed","_classCallCheck","this","hashCode","_createClass","key","value","m","Math","pow","min","arguments","length","undefined","max","raw","abs","next","floor","hash","i","charCodeAt","TerrainGenerator","radius","seedFunction","baseNoise","layerTwo","generalNoise","alea","createNoise3D","x","y","z","scaleFactor","scale","computeTemperature","point","baseTemperature","terrain","angleBetween","Vector3","angleTo","PI","getNoise","PlanetGeometry","props","meshRef","useRef","altitudes","temperatures","threeTone","useLoader","TextureLoader","require","minFilter","NearestFilter","magFilter","useEffect","geometry","current","material","attributes","position","count","getX","getY","getZ","normalVector","normalize","multiplyScalar","getTerrain","push","setX","setY","setZ","setAttribute","Float32BufferAttribute","uniforms","time","computeVertexNormals","React","createElement","Fragment","ref","renderOrder","args","resolution","hasAtmosphere","CustomShaderMaterial","baseMaterial","MeshToonMaterial","vertexShader","fragmentShader","silent","grassColor","colorProfile","gradientMap","color","atmosphereFragment","atmosphereVertex","getOrbitalPeriod","orbitRadius","planetMass","gravitationalConstant","semiMajorAxis","sqrt","Moon","orbitAtmosphereRef","shipAtmosphereRef","_useState","useState","_useState2","_slicedToArray","atmosphereColor","Color","cameraIndex","orbitalPeriod","console","log","useFrame","state","delta","planet","pos","period","alpha","Date","now","orbitOffset","cos","sin","getMoonPosition","orbitCameraRef","cameraPos","thirdPersonCameraRef","pCenter","updateOrbitAtmpshereUniforms","updateShipAtmpshereUniforms","visible","onClick","event","setCameraTarget","stopPropagation","fog","transparent","uSunPos","uColor","uRadius","side","BackSide","starMass","Planet","getPlanetPosition","Sun","MeshStandardMaterial","emissive","emissiveColor","baseColor","tintColor","hex","substring","bigint","parseInt","hexToRgb","lightColor","factor","lightBlendFactor","round","toString","slice","toUpperCase","blendedColor","distance","intensity","StarSystem","random","planetsNum","getInt","planetRefs","planetAttributes","moonAttributes","planetMassConstant","starClassDistribution","starClass","name","radiusMin","radiusMax","intensityMin","intensityMax","starAttributes","getDouble","density","mass","seaLevel","humidity","moons","orbitInclination","tilt","j","moon","orbitCamera","thirdPersonCamera","map","index","Ship","acceleration","roleLeft","setRoleLeft","_useState3","_useState4","roleRight","setRoleRight","_useState5","_useState6","yawLeft","setYawLeft","_useState7","_useState8","yawRight","setYawRight","_useState9","_useState10","pitchUp","setPitchUp","_useState11","_useState12","pitchDown","setPitchDown","_useState13","_useState14","accelerating","setAccelerating","_useState15","_useState16","maxSpeed","setMaxSpeed","window","addEventListener","e","code","getWorldDirection","rotateZ","rotateY","rotateX","translateZ","switchCamera","startingPosition","rotation","Euler","ThirdPersonCamera","camera","cameraRef","currentPosition","currentLookAt","target","idealOffset","applyQuaternion","quaternion","add","calculateIdealOffset","idealLookAt","calculateIdealLookAt","copy","PerspectiveCamera","fov","far","Scene","shipRef","targetRef","_useThree","useThree","set","orbitCameraPosition","scene","lerping","lerpStart","offSet","startingCameraTarget","startingCameraPos","setCameraIndex","useOrbitCamera","setUseOrbitCamera","_useThree2","size","delts","targetPos","object","lerpVectors","addVectors","lerpTime","attach","OrbitControls","newTarget","clone","subVectors","startingAngle","Quaternion","App","setKey","setSeed","result","characters","charactersLength","counter","charAt","randomSeed","prevKey","id","Box","component","sx","height","width","Canvas","dpr","devicePixelRatio","gl","logarithmicDepthBuffer","antialias","Stats","createRoot","document","getElementById","render","reportWebVitals","onPerfEntry","Function","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.647abca9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/threeTone.f8722875.jpg\";","export default class RandomNumberGenerator {\n    seed: number\n\n    constructor(seed: String) {\n      this.seed = hashCode(seed);\n    }\n  \n    // LCG parameters from Numerical Recipes\n    next() {\n      const a = 1664525;\n      const c = 1013904223;\n      const m = Math.pow(2, 32); // 2^32\n      this.seed = (a * this.seed + c) % m;\n      return this.seed / m;\n    }\n  \n    // Generate a random integer between 0 and max - 1\n    getInt(min: number = 0, max: number = 10) {\n        const raw = Math.abs(this.next());\n        return Math.floor(raw*(max-min)+min);\n    }\n\n    // Generate a random integer between 0 and max - 1\n    getDouble(min: number = 0.0, max: number = 1.0) {\n        const raw = Math.abs(this.next() * max);\n        return raw*(max-min)+min;\n    }\n  }\n\n  // Create a simple hash code function for the seed\nconst hashCode = function(seed: String) {\n    var hash = 0;\n    if (seed.length === 0) return hash;\n    for (var i = 0; i < seed.length; i++) {\n        const char = seed.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash &= hash; // Convert to 32bit integer\n    }\n    return hash;\n};\n  \n","import alea from 'alea';\nimport { createNoise2D, createNoise3D, NoiseFunction3D } from 'simplex-noise';\nimport { Mesh, BufferGeometry, NormalBufferAttributes, Material, Vector3} from 'three';\nimport { meshRefType } from '../types'\n\ntype randomFunction = {\n    (): number;\n    next(): number;\n    uint32(): number;\n    fract53(): number;\n    version: string;\n    args: any[];\n    exportState(): [number, number, number, number];\n    importState(state: [number, number, number, number]): void;\n}\n\nexport default class TerrainGenerator {\n    seed: string;\n    seedFunction: randomFunction;\n    baseNoise: NoiseFunction3D;\n    layerTwo: NoiseFunction3D;\n    generalNoise: NoiseFunction3D;\n    radius: number\n\n    constructor(seed: string, radius: number) {\n        this.seed = seed;\n        this.seedFunction = alea(seed)\n        this.baseNoise = createNoise3D(this.seedFunction)\n        this.layerTwo = createNoise3D(this.seedFunction)\n        this.generalNoise = createNoise3D(this.seedFunction)\n        this.radius = radius\n    }\n\n    getTerrain(x: number, y: number, z: number): number {\n        const scaleFactor = this.radius*.05;\n        // use the seeded random function to initialize the noise function\n        return this.radius+this.baseNoise(x, y, z)*scaleFactor+0.5*this.baseNoise((x+1000)*2, (y+1000)*2, (z+1000)*2)*scaleFactor+0.25*this.baseNoise((x+1000)*4, (y+1000)*4, (z+1000)*4)+0.25*this.baseNoise((x+1000)*6, (y+1000)*6, (z+1000)*6)*scaleFactor\n    }\n\n    getNoise(x: number, y: number, z: number, scale: number): number {\n        return this.generalNoise((x+2000)*scale, (y+2000)*scale, (z+2000)*scale)\n    }\n}\n\nconst getTerrain = (x: number, y: number, z: number) => {\n    const seedFunction = alea('seed');\n    // use the seeded random function to initialize the noise function\n    const noise3d = createNoise3D(seedFunction);\n    return noise3d\n}\n\nconst getNoise = (x: number, y: number, z: number) => {\n    const seedFunction = alea('seed');\n    // use the seeded random function to initialize the noise function\n    const noise3d = createNoise3D(seedFunction);\n    return noise3d\n}\n\nconst affectBaseTerrain = (vertex: Vector3) => {\n\n}\n\nconst generatePlanet = (meshRef: meshRefType, seed: string) => {\n    if(!meshRef.current) {\n        console.log('There was an issue generating planet')\n        return\n    }\n\n    const seedFunction = alea('seed');\n    let vertices = meshRef.current && meshRef.current.geometry.attributes.position.array;\n\n    const noise3D = createNoise3D(seedFunction);\n    \n    for (let i = 0; i < vertices.length; i += 3) {\n\n        let x = vertices[i]\n        let y = vertices[i+1]\n        let z = vertices[i+2]\n\n        let vertex = new Vector3(x, y, z)\n\n        // **********************\n        // Generate base terrain\n        // **********************\n        const noise = noise3D(x, y, z)\n        vertex.multiplyScalar(2)\n        // Modulate the vertex position with the noise value\n        vertices[i] = vertex.x\n        vertices[i+1] = vertex.y\n        vertices[i+2] = vertex.z\n    }\n\n    meshRef.current.geometry.attributes.position.needsUpdate = true;\n    meshRef.current.geometry.computeVertexNormals();\n}","import React, { useRef, useEffect, useState } from 'react';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { useTexture } from '@react-three/drei';\nimport { BoxGeometry, Color, Mesh, MeshToonMaterial, MeshPhongMaterial, ShaderMaterial, Vector3, Float32BufferAttribute, MeshStandardMaterial, NearestFilter, TextureLoader, Texture } from 'three';\nimport { meshRefType } from '../types';\nimport TerrainGenerator from './TerrainGenerator'\nimport PlanetMaterial from './planetMaterial';\nimport CustomShaderMaterial from 'three-custom-shader-material'\n// @ts-ignore\nimport planetFragment from '../shaders/planetFragment.js'\n// @ts-ignore\nimport planetVertex from '../shaders/planetVertex.js'\n\ntype PlanetGeometryProps = {\n  radius: number\n  resolution: number\n  meshRef: meshRefType\n  seed: string\n  baseTemperature: number\n  colorProfile: number\n  hasAtmosphere: boolean\n}\n\nconst computeColor = (point: Vector3, radius: number) => {\n  let color = new Color( 0xffffff );\n  if(point.length()<=(radius+radius*.01)){\n    color = new Color('white')\n  } else {\n    color = new Color('green')\n  }\n\n  return color\n}\n\nconst computeTemperature = (point: Vector3, baseTemperature: number, terrain: TerrainGenerator) => {\n  // Angular distance from equater\n  const angleBetween = (new Vector3(0,1,0)).angleTo(point)/Math.PI\n  const distanceFromEquator = Math.abs(0.5-angleBetween)/0.5\n\n  const temperature =(1-distanceFromEquator)*baseTemperature+terrain.getNoise(point.x, point.y, point.z, .1)*10//+terrain.getNoise(point.x, point.y, point.z, .5)*5\n  return temperature\n}\n\nconst PlanetGeometry = (props: PlanetGeometryProps) => {\n  const meshRef = useRef<Mesh>(null);\n  const terrain = new TerrainGenerator(props.seed, props.radius)\n  const altitudes: number[] = []\n  const temperatures: number[] = []\n\n  const threeTone = useLoader(TextureLoader, require('../assets/textures/threeTone.jpg')) as Texture;\n  threeTone.minFilter = NearestFilter\n  threeTone.magFilter = NearestFilter\n  \n  useEffect(() => {\n    let geometry = meshRef.current!.geometry as BoxGeometry;\n    let material = meshRef.current!.material as ShaderMaterial;\n\n    for(let i = 0; i < geometry.attributes.position.count; i++){\n      let x = geometry.attributes.position.getX(i)\n      let y = geometry.attributes.position.getY(i)\n      let z = geometry.attributes.position.getZ(i)\n      let normalVector = new Vector3(x, y, z).normalize()\n\n      normalVector.multiplyScalar(terrain.getTerrain(normalVector.x, normalVector.y, normalVector.z))\n      \n      altitudes.push(normalVector.length())\n      temperatures.push(computeTemperature(normalVector, props.baseTemperature, terrain)\n      )\n      x = normalVector.x\n      y = normalVector.y\n      z = normalVector.z\n\n      geometry.attributes.position.setX(i, x)\n      geometry.attributes.position.setY(i, y)\n      geometry.attributes.position.setZ(i, z)\n    }\n    geometry.setAttribute('altitude', new Float32BufferAttribute(altitudes, 1));\n    geometry.setAttribute('temperature', new Float32BufferAttribute(temperatures, 1));\n    // Just here so I remember how to do uniforms\n    material.uniforms.time = {value: 1.0}\n\n    geometry.computeVertexNormals()\n  }, []);\n\n  return (\n    <>\n      <mesh ref={meshRef} renderOrder={2}>\n        {<boxGeometry args={[1, 1, 1, props.resolution, props.resolution, props.resolution]} />}\n        { props.hasAtmosphere? \n          <CustomShaderMaterial\n          baseMaterial={MeshToonMaterial}\n          vertexShader={planetVertex}\n          fragmentShader={planetFragment}\n          silent\n          uniforms={{\n            grassColor: {\n              value: (props.colorProfile === 1)? [10.0/285.0,157.0/285.0,117.0/285.0, 1.0] : [100.0/255.0, 41.0/255.0, 38.0/255.0, 1.0],\n            },\n\n            radius: {\n              value: props.radius\n            }\n          }}\n          gradientMap={threeTone}\n          // ...\n      />\n        :  <CustomShaderMaterial\n        baseMaterial={MeshToonMaterial}\n        silent\n        uniforms={{\n          grassColor: {\n            value: (props.colorProfile === 1)? [10.0/285.0,157.0/285.0,117.0/285.0, 1.0] : [100.0/255.0, 41.0/255.0, 38.0/255.0, 1.0],\n          },\n\n          radius: {\n            value: props.radius\n          }\n        }}\n        gradientMap={threeTone}\n        color={'grey'}\n        // ...\n    />}\n\n      </mesh>\n    </>\n  );\n};\n\nexport default PlanetGeometry;","export default /* glsl */ `\nvarying vec3 vPosition;\nvarying vec4 vColor;\nvarying vec2 vUv;\nattribute float altitude;\nattribute float temperature;\nvarying float vAltitude;\nvarying float vTemperature;\n\nvoid main() {\n    vUv = uv;\n    vPosition = position;\n    vNormal = normal;\n    vAltitude = altitude;\n    vTemperature = temperature;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;","export default /* glsl */ `\nvarying vec3 vPosition;\nvarying vec2 vUv;\nvarying vec4 vColor;\nvarying float vAltitude;\nvarying float vTemperature;\nuniform float time;\nuniform float radius;\nuniform vec4 grassColor;\n\nvoid main() {\n    vec4 calculated_color = grassColor;\n\n    if ( vTemperature <= 32.0 ) {\n        calculated_color = vec4(1.0, 1.0, 1.0, 1.0);\n    } else if ( vAltitude < radius+radius*.01 ) {\n        calculated_color = vec4(vec3(244,227,171)/255.0, 1.0);\n    }\n    /*if ( vTemperature >= 90.0 ) {\n        calculated_color = vec4(vec3(244,227,171)/255.0, 1.0);\n    }\n    if ( vTemperature >= 85.0 ) {\n        calculated_color = vec4(mix(vec3(10,157,117), vec3(244,227,171), (vTemperature-85.0)/5.0)/255.0, 1.0);\n    }*/\n   \n    csm_DiffuseColor = calculated_color;\n}\n`;","export default /* glsl */ `\n//precision highp float;\n#define FLT_MAX 3.402823466e+38\n\nvarying vec3 vPosition;\n\nuniform vec3 uSunPos;\nuniform vec3 cameraPos;\n\nuniform vec3 pCenter;\nuniform vec3 uColor;\nuniform float uRadius;\n\nvec2 raySphereIntersection(vec3 center, float radius, vec3 rayOrigin, vec3 rayDir) {\n    vec3 offset = rayOrigin - center;\n    float a = 1.0; // set to dot(rayDir, rayDir); if raydir not normalized\n    float b = 2.0 * dot(offset, rayDir);\n    float c = dot(offset, offset) - radius * radius;\n    float d = b * b - 4.0 * a * c;\n\n    if (d > 0.0) {\n        float s = sqrt(d);\n        float dstToSphereNear = max(0.0 , ( -b - s ) / ( 2.0 * a ));\n        float dstToSphereFar = ( -b + s ) / ( 2.0 * a );\n\n        if (dstToSphereFar >= 0.0) {\n            return vec2(dstToSphereNear, dstToSphereFar-dstToSphereNear);\n        }\n\n       /*float t = (-b - sqrt(d)) / (2.0 * a);\n        if (t >= 0.0) {\n            intersectionPoint = rayOrigin + rayDir * t;\n            return true;\n        }*/\n    }\n\n    return vec2(FLT_MAX, 0);\n}\n\nvoid main() {\n    vec3 rayOrigin = cameraPos;\n    vec3 rayDir = normalize(vPosition-cameraPos);\n    vec2 hitInfo = raySphereIntersection( pCenter, uRadius, cameraPos, rayDir);\n    float dstToAtmosphereNear = hitInfo.x;\n    float dstThroughAtmosphere = hitInfo.y;\n    \n    gl_FragColor = vec4(uColor, 1.0*(dstThroughAtmosphere) / (2.0*uRadius));\n}\n`;\n","export default /* glsl */ `\n\nattribute vec3 aPosition;\n\nvarying vec3 vPosition;\n\nvoid main() {\n    vec4 worldPosition = modelMatrix * vec4(position, 1.0);\n    vPosition = worldPosition.xyz;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n","import React, {useRef, useEffect, RefObject} from 'react';\nimport { createRoot } from 'react-dom/client'\nimport THREE, { MeshStandardMaterial, PointLight, Vector3, Mesh, MeshToonMaterial, Color, TextureLoader, NearestFilter, Texture, ShaderMaterial, Camera, DoubleSide, BackSide} from 'three';\nimport { useState } from 'react';\nimport PlanetGeometry from '../helpers/PlanetGeometry';\nimport TerrainGenerator from '../helpers/TerrainGenerator';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { meshRefType, MoonAttributes } from '../types';\n\n// @ts-ignore\nimport atmosphereFragment from '../shaders/atmosphere/atmosphereFragment.js'\n// @ts-ignore\nimport atmosphereVertex from '../shaders/atmosphere/atmosphereVertex.js'\nimport { PlanetAttributes } from '../types';\n\n//import TerrainGenerator from '../helpers/terrain-generator'\n//import CubeSphere from '../helpers/CubeSphere';\nexport type MoonProps = {    \n    attributes: MoonAttributes\n    planet: meshRefType\n    colorProfile: number\n    cameraIndex: number\n    orbitCameraRef: React.MutableRefObject<Camera>\n    thirdPersonCameraRef: React.MutableRefObject<Camera>\n    setCameraTarget?: Function\n}\n\nconst getOrbitalPeriod = (orbitRadius: number, planetMass: number) => {\n    const gravitationalConstant = 6.674*Math.pow(10, -11) // in N*m^2*kg^-2\n    const semiMajorAxis = orbitRadius*2 // in kg\n    return 2*Math.PI*Math.sqrt(Math.pow(semiMajorAxis, 3)/(planetMass*gravitationalConstant)) // in hours, I think?\n}\n\nexport default function Moon(props: MoonProps) {\n    const material = new MeshToonMaterial(); // MeshStandardMaterial({color: 'blue' })\n    const orbitRadius = props.attributes.orbitRadius;\n    const orbitAtmosphereRef = useRef<Mesh>(null);\n    const shipAtmosphereRef = useRef<Mesh>(null);\n    const [position, setPosition] = useState(new Vector3(props.attributes.orbitRadius, 0, 0))\n    const meshRef = useRef<Mesh | null>(null);\n    const radius = props.attributes.radius\n    const resolution = 20\n    const baseTemperature = 100\n    const atmosphereColor = new Color(102/255, 162/255, 209/255)\n\n    let cameraIndex = props.cameraIndex\n\n    useEffect(() => {\n        cameraIndex = props.cameraIndex\n    }, [props.cameraIndex])\n\n    const threeTone = useLoader(TextureLoader, require('../assets/textures/threeTone.jpg')) as Texture;\n    threeTone.minFilter = NearestFilter\n    threeTone.magFilter = NearestFilter\n\n    const orbitalPeriod = getOrbitalPeriod(props.attributes.orbitRadius, props.attributes.planetMass)\n    console.log('moon orbital period')\n    console.log(orbitalPeriod)\n    let alphaLast = 0\n    let timeLast = 0\n    const handleCLicked = (event: any) => {\n        if(meshRef && meshRef.current){\n            props.setCameraTarget && props.setCameraTarget(meshRef)\n            event.stopPropagation()\n        }\n    }\n\n\n\n    const getMoonPosition = (delta: number = 0) => {\n        const period = orbitalPeriod*60*60*1000\n        const alpha = ( Date.now()%period)/period*2*Math.PI+props.attributes.orbitOffset\n        return [orbitRadius*(Math.cos(alpha)), orbitRadius*(Math.sin(alpha))]\n    }\n\n    const updateOrbitAtmpshereUniforms = () => {\n        const material = orbitAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(props.cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            meshRef.current && (material.uniforms.pCenter.value = meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n\n    const updateShipAtmpshereUniforms = () => {\n        const material = shipAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            meshRef.current && (material.uniforms.pCenter.value = meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n\n    useFrame((state, delta) => {\n        if (meshRef.current && props.planet) {// && props.colorProfile===0) {\n            //meshRef.current.rotation.y += 0.01*delta;\n\n            const pos = getMoonPosition(delta);\n            \n            // @ts-ignore\n            meshRef.current.position.x = props.planet.current.position.x+pos[0];\n            // @ts-ignore\n            meshRef.current.position.z = props.planet.current.position.z+pos[1];\n            meshRef.current.position.y = 0;\n            //console.log(meshRef.current.geometry.getAttribute(\"temperature\"))\n            // meshRef.current.position.x += 1\n        }\n        \n        if(cameraIndex) {\n            updateOrbitAtmpshereUniforms();\n        } else {\n            updateShipAtmpshereUniforms();\n        }\n    })\n\n    //useEffect(() => {\n    //    TerrainGenerator.generatePlanet(meshRef, 'asdf')\n    //}, []);\n\n    return (\n        <>\n            <mesh visible={true} ref={meshRef} onClick={handleCLicked} position={position}>\n                {/*<sphereGeometry args={[16, 40, 40]}/>*/}\n                <PlanetGeometry hasAtmosphere={props.attributes.hasAtmosphere} baseTemperature={baseTemperature} radius={radius} resolution={resolution} seed={props.attributes.seed} meshRef={meshRef} colorProfile={props.colorProfile} />\n                <mesh visible={props.attributes.hasAtmosphere}>\n                    <sphereGeometry args={[radius, resolution, resolution]}/>\n                    <meshToonMaterial fog={true} color={'#66a2d1'} gradientMap={threeTone} />\n                </mesh>\n                {<mesh visible={props.attributes.hasAtmosphere && cameraIndex===1} ref={orbitAtmosphereRef} renderOrder={-10}>\n                    <sphereGeometry args={[radius*1.2, 30, 30]}/>\n                    {<shaderMaterial transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, uColor: {value: atmosphereColor}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uRadius: {value: props.attributes.radius*1.2}}} />}\n                </mesh>}\n                {<mesh visible={props.attributes.hasAtmosphere && cameraIndex===0} ref={shipAtmosphereRef} renderOrder={-10}>\n                    <sphereGeometry args={[radius*1.2, 30, 30]}/>\n                    {<shaderMaterial side={BackSide} transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, uColor: {value: atmosphereColor}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uRadius: {value: props.attributes.radius*1.2}}} />}\n                </mesh>}\n            </mesh>\n        </>\n    );\n}","import React, {useRef, useEffect, RefObject} from 'react';\nimport { createRoot } from 'react-dom/client'\nimport { MeshStandardMaterial, PointLight, Vector3, Mesh, MeshToonMaterial, Color, TextureLoader, NearestFilter, Texture, ShaderMaterial, Camera, DoubleSide, BackSide} from 'three';\nimport { useState } from 'react';\nimport PlanetGeometry from '../helpers/PlanetGeometry';\nimport TerrainGenerator from '../helpers/TerrainGenerator';\nimport { useFrame, useLoader } from '@react-three/fiber';\n\n// @ts-ignore\nimport atmosphereFragment from '../shaders/atmosphere/atmosphereFragment.js'\n// @ts-ignore\nimport atmosphereVertex from '../shaders/atmosphere/atmosphereVertex.js'\nimport { meshRefType, PlanetAttributes } from '../types';\n\n//import TerrainGenerator from '../helpers/terrain-generator'\n//import CubeSphere from '../helpers/CubeSphere';\nexport type PlanetProps = {    \n    meshRef: meshRefType\n    attributes: PlanetAttributes\n    starMass: number\n    colorProfile: number\n    cameraIndex: number\n    orbitCameraRef: React.MutableRefObject<Camera>\n    thirdPersonCameraRef: React.MutableRefObject<Camera>\n    setCameraTarget?: Function\n}\n\nconst getOrbitalPeriod = (orbitRadius: number, starMass: number) => {\n    const gravitationalConstant = 6.674*Math.pow(10, -11) // in N*m^2*kg^-2\n    const semiMajorAxis = orbitRadius*2 // in kg\n    return 2*Math.PI*Math.sqrt(Math.pow(semiMajorAxis, 3)/(starMass*gravitationalConstant)) // in hours, I think?\n}\n\nexport default function Planet(props: PlanetProps) {\n    const material = new MeshToonMaterial(); // MeshStandardMaterial({color: 'blue' })\n    const orbitRadius = props.attributes.orbitRadius;\n    const orbitAtmosphereRef = useRef<Mesh>(null);\n    const shipAtmosphereRef = useRef<Mesh>(null);\n    const [position, setPosition] = useState(new Vector3(props.attributes.orbitRadius, 0, 0))\n    const radius = props.attributes.radius\n    const resolution = 80\n    const baseTemperature = 100\n    const atmosphereColor = new Color(102/255, 162/255, 209/255)\n\n    let cameraIndex = props.cameraIndex\n\n    useEffect(() => {\n        cameraIndex = props.cameraIndex\n    }, [props.cameraIndex])\n\n    const threeTone = useLoader(TextureLoader, require('../assets/textures/threeTone.jpg')) as Texture;\n    threeTone.minFilter = NearestFilter\n    threeTone.magFilter = NearestFilter\n\n    const orbitalPeriod = getOrbitalPeriod(props.attributes.orbitRadius, props.starMass)\n    console.log('planet orbital period')\n    console.log(orbitalPeriod)\n    let alphaLast = 0\n    let timeLast = 0\n    const handleCLicked = (event: any) => {\n        if(props.meshRef && props.meshRef.current){\n            props.setCameraTarget && props.setCameraTarget(props.meshRef)\n            event.stopPropagation()\n        }\n    }\n\n\n\n    const getPlanetPosition = (delta: number = 0) => {\n        const period = orbitalPeriod*60*60*1000\n        const alpha = ( Date.now()%period)/period*2*Math.PI+props.attributes.orbitOffset\n        return [orbitRadius*(Math.cos(alpha)), orbitRadius*(Math.sin(alpha))]\n    }\n\n    const updateOrbitAtmpshereUniforms = () => {\n        const material = orbitAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(props.cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            props.meshRef.current && (material.uniforms.pCenter.value = props.meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n\n    const updateShipAtmpshereUniforms = () => {\n        const material = shipAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            props.meshRef.current && (material.uniforms.pCenter.value = props.meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n\n    useFrame((state, delta) => {\n        if (props.meshRef.current) {// && props.colorProfile===0) {\n            //meshRef.current.rotation.y += 0.01*delta;\n\n            const pos = getPlanetPosition(delta);\n        \n            props.meshRef.current.position.x = pos[0];\n            props.meshRef.current.position.z = pos[1];\n            props.meshRef.current.position.y = 0;\n            //console.log(meshRef.current.geometry.getAttribute(\"temperature\"))\n            // meshRef.current.position.x += 1\n        }\n\n        if(cameraIndex) {\n            updateOrbitAtmpshereUniforms();\n        } else {\n            updateShipAtmpshereUniforms();\n        }\n    })\n\n    //useEffect(() => {\n    //    TerrainGenerator.generatePlanet(meshRef, 'asdf')\n    //}, []);\n\n    return (\n        <>\n            <mesh visible={true} ref={props.meshRef} onClick={handleCLicked} position={position}>\n                {/*<sphereGeometry args={[16, 40, 40]}/>*/}\n                <PlanetGeometry hasAtmosphere={props.attributes.hasAtmosphere} baseTemperature={baseTemperature} radius={radius} resolution={resolution} seed={props.attributes.seed} meshRef={props.meshRef} colorProfile={props.colorProfile} />\n                { <mesh >\n                    <sphereGeometry args={[radius, resolution, resolution]}/>\n                    <meshToonMaterial fog={true} color={'#66a2d1'} gradientMap={threeTone} />\n                </mesh>}\n                {<mesh visible={cameraIndex===1} ref={orbitAtmosphereRef} renderOrder={-10}>\n                    <sphereGeometry args={[radius*1.2, 30, 30]}/>\n                    {<shaderMaterial transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uColor: {value: atmosphereColor}, uRadius: {value: props.attributes.radius*1.2}}} />}\n                </mesh>}\n                {<mesh visible={cameraIndex===0} ref={shipAtmosphereRef} renderOrder={-10}>\n                    <sphereGeometry args={[radius*1.2, 30, 30]}/>\n                    {<shaderMaterial side={BackSide} transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, uColor: {value: atmosphereColor}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uRadius: {value: props.attributes.radius*1.2}}} />}\n                </mesh>}\n            </mesh>\n        </>\n    );\n}","import React, {useEffect, useRef} from 'react';\nimport { MeshStandardMaterial, Vector3,  Mesh, Camera, ShaderMaterial } from 'three';\nimport { StarAttributes, StarClass } from '../types';\nexport type SunProps = {\n    position?: Vector3\n    setCameraTarget?: Function\n    orbitCameraRef: React.MutableRefObject<Camera>\n    thirdPersonCameraRef: React.MutableRefObject<Camera>\n    cameraIndex: number\n    attributes: StarAttributes\n}\n\nfunction hexToRgb(hex: string) {\n    // Remove the hash at the start if it's there\n    hex = hex.substring(1);\n    const bigint = parseInt(hex, 16);\n    const r = 255;\n    const g = (bigint >> 8) & 255;\n    const b = (bigint >> 16) & 255;\n\n    return [r, g, b];\n}\n\nfunction rgbToHex(color: number[]) {\n    return '#' + (1 << 24 | color[0] << 16 | color[1] << 8 | color[2]).toString(16).slice(1).toUpperCase();\n}\n\nfunction blendColors(baseColor: number[], tintColor: number[], factor: number) {\n    const r = Math.round(baseColor[0] + (tintColor[0] - baseColor[0]) * factor);\n    const g = Math.round(baseColor[1] + (tintColor[1] - baseColor[1]) * factor);\n    const b = Math.round(baseColor[2] + (tintColor[2] - baseColor[2]) * factor);\n\n    return [r, g, b];\n}\n\nexport default function Sun(props: SunProps) {\n\n    const meshRef = useRef<Mesh | null>(null);\n    const orbitAtmosphereRef = useRef<Mesh>(null);\n    const shipAtmosphereRef = useRef<Mesh>(null);\n\n    const blendedColor = () => {\n        return rgbToHex(blendColors([255, 255, 255], hexToRgb(props.attributes.lightColor), props.attributes.lightBlendFactor))\n    }\n\n    const handleCLicked = (event: any) => {\n        if(meshRef && meshRef.current){\n            props.setCameraTarget && props.setCameraTarget(meshRef)\n            event && event.stopPropagation()\n        }\n    }\n\n    useEffect(() => {\n        props.setCameraTarget && props.setCameraTarget(meshRef)\n    }, [])\n\n\n    const updateOrbitAtmpshereUniforms = () => {\n        const material = orbitAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(props.cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            meshRef.current && (material.uniforms.pCenter.value = meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n\n    const updateShipAtmpshereUniforms = () => {\n        const material = shipAtmosphereRef.current!.material as ShaderMaterial;\n        if (material && material.uniforms) {\n            if(props.cameraIndex === 1) {\n                if (props.orbitCameraRef && props.orbitCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.orbitCameraRef.current.position;\n                }\n            } else {\n                if (props.thirdPersonCameraRef && props.thirdPersonCameraRef.current) {\n                    material.uniforms.cameraPos.value = props.thirdPersonCameraRef.current.position;\n                }\n            }\n            meshRef.current && (material.uniforms.pCenter.value = meshRef.current.position)\n        } else {\n            console.log('no material')\n        }\n    }\n    /*\n    useFrame((state, delta) => {\n        if(props.cameraIndex) {\n            updateOrbitAtmpshereUniforms();\n        } else {\n            updateShipAtmpshereUniforms();\n        }\n    })\n    */\n\n    return (\n    <>\n        <mesh ref={meshRef} onClick={handleCLicked} material={new MeshStandardMaterial({ color: props.attributes.color, emissive: props.attributes.emissiveColor })}>\n            <sphereGeometry args={[props.attributes.radius, 30, 30]}/>\n            <pointLight color={blendedColor()} distance={600000000} intensity={props.attributes.intensity} />\n        </mesh>\n        {/*<mesh visible={props.cameraIndex===1} ref={orbitAtmosphereRef} renderOrder={-10}>\n            <sphereGeometry args={[props.radius*1.2, 30, 30]}/>\n            {<shaderMaterial transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, uColor: {value: atmosphereColor}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uRadius: {value: props.radius*1.1}}} />}\n        </mesh>}\n        {<mesh visible={props.cameraIndex===0} ref={shipAtmosphereRef} renderOrder={-10}>\n            <sphereGeometry args={[props.radius*1.2, 30, 30]}/>\n            {<shaderMaterial side={BackSide} transparent fragmentShader={atmosphereFragment} vertexShader={atmosphereVertex} uniforms={{uSunPos: {value: [0,0,0]}, uColor: {value: atmosphereColor}, cameraPos: {value: [0,0,0]}, pCenter: {value: [0,0,0]}, uRadius: {value: props.radius*1.1}}} />}\n        </mesh>*/}\n    </>\n    );\n}","import React, { useRef, useState } from 'react';\nimport { createRoot } from 'react-dom/client'\nimport { Camera, Mesh, MeshStandardMaterial, PointLight } from 'three';\nimport RandomNumberGenerator from '../helpers/RandomNumberGenorator';\nimport { meshRefType, MoonAttributes, PlanetAttributes, StarAttributes, StarClass } from '../types';\nimport Moon from './Moon';\nimport Planet from './Planet';\nimport Sun from './Sun';\n\nexport type StarSystemProps = {\n    seed: String\n    time: number\n    cameraIndex: number\n    setCameraTarget?: Function\n    orbitCamera: React.MutableRefObject<Camera>\n    thirdPersonCamera: React.MutableRefObject<Camera>\n}\n\nexport default function StarSystem(props: StarSystemProps) {\n\n  const STAR_CLASSES: StarClass[] = [\n    {\n      name: 'Yellow Dwarf',\n      color: 'white',\n      emissiveColor: '#ffdd00',\n      lightColor: 'white',\n      radiusMin: 3000000,\n      radiusMax: 5000000,\n      intensityMin: 0.7,\n      intensityMax: 0.9,\n      lightBlendFactor: 0,\n    },\n    {\n      name: 'Red Dwarf',\n      color: '#f85e00',\n      emissiveColor: '#f85e00',\n      lightColor: '#f85e00',\n      radiusMin: 4000000,\n      radiusMax: 6000000,\n      intensityMin: 0.5,\n      intensityMax: 0.7,\n      lightBlendFactor: .5,\n    },\n    {\n      name: 'Red Super Giant',\n      color: 'red',\n      emissiveColor: 'red',\n      lightColor: 'red',\n      radiusMin: 7000000,\n      radiusMax: 10000000,\n      intensityMin: 0.5,\n      intensityMax: 0.7,\n      lightBlendFactor: .8,\n    },\n  ]\n  const random = new RandomNumberGenerator(props.seed);\n  const planetsNum = random.getInt(0, 6)\n\n  const sunRadius = 4000000\n  const starMass = 200000000*Math.pow(10,25)\n\n  let planetRefs: meshRefType[] = []\n\n  const minPlanetRadius = 300000\n  const maxPlanetRadius = 1100000\n\n  const minPlanetMoons = 0\n  const maxPlanetMoons = 3\n\n  const orbitDistance = 12000000\n  const moonOrbitDistance = 1000000\n\n  const planetAttributes: PlanetAttributes[] = []\n  const moonAttributes: MoonAttributes[] = []\n\n  const planetMassConstant = Math.pow(10,15)\n  \n  const starClassDistribution = [0,0,0,0,0,0,0,1,1,2,2]\n  const starClassIndex = starClassDistribution[random.getInt(0, starClassDistribution.length)]\n  const starClass = STAR_CLASSES[starClassIndex]\n\n  let starAttributes = {\n    radius: random.getInt(starClass.radiusMin, starClass.radiusMax),\n    intensity: random.getDouble(starClass.intensityMin, starClass.intensityMax),\n    color: starClass.color,\n    emissiveColor: starClass.emissiveColor,\n    lightColor: starClass.lightColor,\n    lightBlendFactor: starClass.lightBlendFactor\n  } as StarAttributes\n\n  for (let i = 0; i < planetsNum; i++) {\n      planetRefs.push(useRef<Mesh | null>(null))\n      const radius = random.getInt(minPlanetRadius, maxPlanetRadius)\n      const density = random.getDouble(0.8, 1.0)\n      let attributes = {\n        seed: random.getDouble(1.0, 100000.0).toString(),\n        hasAtmosphere: random.getInt(1, 10) > 1,\n        radius: radius,\n        density: density,\n        mass: (4/3)*Math.PI*Math.pow(radius,3)*density*planetMassConstant,\n        seaLevel: radius,\n        baseTemperature: 100,\n        orbitOffset: random.getDouble(0.0, 2*Math.PI),\n        humidity: 100,\n        moons: random.getInt(minPlanetMoons, maxPlanetMoons),\n        orbitRadius: (i+1)*orbitDistance+sunRadius,\n        orbitInclination: random.getInt(0, 35),\n        tilt: random.getInt(0, 35)\n      } as PlanetAttributes\n\n      for (let j = 0; j <= attributes.moons; j++) {\n        const radius = attributes.radius*random.getDouble(.1, .5)\n\n        let moon = {\n          planet: i,\n          hasAtmosphere: random.getInt(1, 10) === 1,\n          seed: random.getDouble(1.0, 100000.0).toString(),\n          orbitOffset: random.getDouble(0.0, 2*Math.PI),\n          radius: radius,\n          seaLevel: radius,\n          planetMass: attributes.mass,\n          baseTemperature: 100,\n          humidity: 100,\n          moons: 0,\n          orbitRadius: (j+1)*moonOrbitDistance+attributes.radius,\n          orbitInclination: random.getInt(0, 35),\n          tilt: random.getInt(0, 35)\n        } as MoonAttributes\n\n        moonAttributes.push(moon)\n      }\n\n      planetAttributes.push(attributes)\n  }\n  \n  return (\n    <>\n      <Sun attributes={starAttributes} setCameraTarget={props.setCameraTarget} cameraIndex={props.cameraIndex} orbitCameraRef={props.orbitCamera} thirdPersonCameraRef={props.thirdPersonCamera}/>\n      {planetAttributes.map( (attributes, index) => {\n        return <Planet meshRef={planetRefs[index]} cameraIndex={props.cameraIndex} orbitCameraRef={props.orbitCamera} thirdPersonCameraRef={props.thirdPersonCamera} setCameraTarget={props.setCameraTarget} colorProfile={random.getInt(0, 2)} starMass={starMass} attributes={attributes}/>\n      })}\n      {moonAttributes.map( (attributes, index) => {\n        return <Moon planet={planetRefs[attributes.planet]} cameraIndex={props.cameraIndex} orbitCameraRef={props.orbitCamera} thirdPersonCameraRef={props.thirdPersonCamera} setCameraTarget={props.setCameraTarget} colorProfile={random.getInt(0, 2)} attributes={attributes}/>\n      })}\n    </>\n  );\n}","import React, { useState } from 'react';\nimport { useGLTF } from '@react-three/drei'\nimport { Vector3, Mesh, MeshToonMaterial, TextureLoader, NearestFilter, Texture, BoxGeometry, Quaternion, MeshBasicMaterial, Euler} from 'three';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { meshRefType } from '../types';\nimport { UFOModel } from '../assets/models/Ufo'\n\nexport type ShipProps = {\n    startingPosition: Vector3\n    startingAngle: Quaternion\n    meshRef: meshRefType\n    switchCamera: Function\n}\n\nexport default function Ship(props: ShipProps) {\n    const threeTone = useLoader(TextureLoader, require('../assets/textures/threeTone.jpg')) as Texture;\n    const meshRef = props.meshRef\n    threeTone.minFilter = NearestFilter\n    threeTone.magFilter = NearestFilter\n\n    const velocity = new Vector3(0, 0, 0)\n    const acceleration = new Vector3(0,0,0)\n    const accelerationConstant = 0\n    const dampingConstant = .95;\n    // @ts-ignore\n\n    const [roleLeft, setRoleLeft] = useState(0)\n    const [roleRight, setRoleRight] = useState(0)\n\n    const [yawLeft, setYawLeft] = useState(0)\n    const [yawRight, setYawRight] = useState(0)\n\n    const [pitchUp, setPitchUp] = useState(0)\n    const [pitchDown, setPitchDown] = useState(0)\n\n    const [accelerating, setAccelerating] = useState(0)\n\n    const [maxSpeed, setMaxSpeed] = useState(100000)\n\n    const handleCLicked = (event: any) => {\n        props.switchCamera()\n    }\n\n    window.addEventListener('keydown', (e) => {\n        //window.alert(e.code)\n        switch(e.code) {\n            case 'KeyQ':\n                setRoleRight(1)\n                break;\n            case 'KeyE':\n                setRoleLeft(1)\n                break;\n            case 'KeyA':\n                setYawLeft(1)\n                break;\n            case 'KeyD':\n                setYawRight(1)\n                break;\n            case 'KeyW':\n                setPitchDown(1)\n                break;\n            case 'KeyS':\n                setPitchUp(1)\n                break;\n            case 'ShiftLeft':\n                setAccelerating(1)\n                break;\n            default:\n                // code block\n\n\n        }\n    })\n    window.addEventListener('keyup', (e) => {\n        switch(e.code) {\n            case 'KeyQ':\n                setRoleRight(0)\n                break;\n            case 'KeyE':\n                setRoleLeft(0)\n                break;\n            case 'KeyA':\n                setYawLeft(0)\n                break;\n            case 'KeyD':\n                setYawRight(0)\n                break;\n            case 'KeyW':\n                setPitchDown(0)\n                break;\n            case 'KeyS':\n                setPitchUp(0)\n                break;\n            case 'ShiftLeft':\n                setAccelerating(0)\n                break;\n            case 'Enter':\n                if(maxSpeed === 100000){\n                    setMaxSpeed(10000)\n                } else if(maxSpeed === 10000) {\n                    setMaxSpeed(200)                \n                } else {\n                    setMaxSpeed(100000)\n                }\n                break;\n            default:\n                // code block\n        }\n    })\n\n    const accelerate = (delta: number) => {\n        if (meshRef.current) {\n            velocity.add(acceleration.normalize().multiplyScalar(accelerationConstant*delta*accelerating))\n            if(velocity.length()>=maxSpeed) {\n                velocity.normalize().multiplyScalar(maxSpeed)\n            }\n        }\n    }\n\n    const move = (delta: number) => {\n        if (meshRef.current) {\n            meshRef.current.position.add(velocity.multiplyScalar(delta))\n        }\n    }\n\n    const dampenVelocity = (delta: number) => {\n        velocity.multiplyScalar(dampingConstant*delta)\n    }\n\n    useFrame((state, delta) => {\n        if (meshRef.current) {\n            meshRef.current.getWorldDirection(acceleration)\n            meshRef.current.rotateZ((roleLeft-roleRight)*0.5*delta)\n            meshRef.current.rotateY((yawLeft-yawRight)*0.5*delta)\n            meshRef.current.rotateX((pitchDown-pitchUp)*0.5*delta)\n            //accelerationConstant += delta*\n            meshRef.current.translateZ((accelerating)*0.5*maxSpeed)\n            //accelerate(delta)\n            //move(delta)\n            //dampenVelocity(delta)\n        }\n    }, -1)\n\n    return (\n        <>\n            <mesh ref={meshRef} onClick={handleCLicked} position={props.startingPosition}>\n                <mesh>\n                    <coneGeometry args={[0.8, 0.3, 30, 8]}/>\n                    <meshToonMaterial color={'#e56b6f'} gradientMap={threeTone} />\n                </mesh>\n                <mesh rotation={new Euler(Math.PI, 0, 0)} position={new Vector3( 0, -0.27, 0)}>\n                    <coneGeometry args={[0.8, 0.2]}/>\n                    <meshToonMaterial color={'#e56b6f'} gradientMap={threeTone} />\n                </mesh>\n                <mesh>\n                    <sphereGeometry args={[0.3, 20, 20]} />\n                    <meshToonMaterial color={'#8ecae6'} gradientMap={threeTone} />\n                </mesh>\n                <mesh position={ new Vector3( 0, -0.17, 0)}>\n                    <cylinderGeometry args={[0.8, 0.8, 0.03]}/>\n                    <meshToonMaterial color={'#f2e9e4'} gradientMap={threeTone} />\n                </mesh>\n            </mesh>\n        </>\n    );\n}","import React, { useRef, useState } from 'react';\nimport { useFrame, useThree } from '@react-three/fiber'\nimport {Camera, Euler, Vector3} from 'three'\nimport { PerspectiveCamera} from '@react-three/drei'\nimport { meshRefType } from '../types';\n\nexport type ThirdPersonCameraProps = {\n    cameraRef: React.MutableRefObject<Camera>\n    target: meshRefType\n}\n\nexport default function ThirdPersonCamera(props: ThirdPersonCameraProps) {\n   const ref = useRef()\n   const camera = props.cameraRef;\n   const currentPosition = new Vector3();\n   const currentLookAt = new Vector3();\n   const target = props.target\n\n   const calculateIdealOffset = () => {\n        const idealOffset = new Vector3(0, 0.5, -3);\n        if (target.current) {\n            idealOffset.applyQuaternion(target.current.quaternion)\n            idealOffset.add(target.current.position)\n        }\n        return idealOffset;\n    }     \n    \n    const calculateIdealLookAt = () => {\n        const idealLookAt = new Vector3(0, .4, 1.3);\n        if (target.current) {\n            idealLookAt.applyQuaternion(target.current.quaternion)\n            idealLookAt.add(target.current.position)\n        }\n        return idealLookAt;\n    }      \n\n    const calculateIdealRotation = () => {\n        const idealRotation = new Euler();\n        if (target.current) {\n            idealRotation.copy(target.current.rotation)\n        }\n        return idealRotation;\n    }\n\n    useFrame((state, delta) => {\n        const idealOffset = calculateIdealOffset();\n        const idealLookAt = calculateIdealLookAt();\n\n        currentPosition.copy(idealOffset)\n        currentLookAt.copy(idealLookAt);\n\n        camera.current.position.copy(currentPosition)\n        //@ts-ignore\n        camera.current.rotation.copy(target.current.rotation)\n        camera.current.rotateY(Math.PI)\n        //const up = new Vector3(0, 1, 0);\n\n       // up.applyAxisAngle(new Vector3(0, 0, 1), target.current.rotation.z);\n\n        //camera.current.up.copy(up);\n       // camera.current.lookAt(currentLookAt)\n\n\n    })\n\n    return (\n        <PerspectiveCamera ref={props.cameraRef} fov={75} far={300000000}/>\n    );\n}","import { OrbitControls, PerspectiveCamera} from '@react-three/drei';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ColorRepresentation, Mesh, BufferGeometry, NormalBufferAttributes, Material, Vector3, Camera, Quaternion, CubeTextureLoader} from 'three';\nimport StarSystem from './system-objects/StarSystem';\nimport { useFrame, useThree } from '@react-three/fiber';\nimport Ship from './player-objects/Ship';\nimport ThirdPersonCamera from './helpers/ThirdPersonCamera';\nimport {  EffectComposer } from '@react-three/postprocessing';\nimport { Atmospheres } from './helpers/Atmosphere';\nimport PostProcessingEffects from './helpers/PostProcessingEffects';\nimport RandomNumberGenerator from './helpers/RandomNumberGenorator';\n\n\ntype meshRefObject = React.MutableRefObject<Mesh<BufferGeometry<NormalBufferAttributes>, Material | Material[]> | null>\n\nexport type SceneProps = {\n    seed: String\n}\n\nexport default function Scene(props: SceneProps) {\n\n    const orbitCameraRef = useRef<any>(null)\n    const thirdPersonCameraRef = useRef<any>(null)\n    const orbitCamera = useRef<any>(null)\n    const shipRef = useRef<Mesh | null>(null);\n    let targetRef = useRef<Mesh | null>(null);\n    const { set, scene } = useThree();\n    const orbitCameraPosition = new Vector3(0, 20000000, 70000000);\n    let lerping = false;\n    let lerpStart = Date.now();\n    let offSet = new Vector3(0,0,0);\n    let startingCameraTarget = new Vector3(0,0,0);\n    let startingCameraPos = new Vector3(0,0,0);\n    let [cameraIndex, setCameraIndex] = useState(1)\n    let [useOrbitCamera, setUseOrbitCamera] = useState(true);\n    const lerpTime = 0.3;\n    const { size, camera } = useThree(); // Using the useThree hook to get size and camera\n    \n    function SkyBox() {\n        const { scene } = useThree();\n        const loader = new CubeTextureLoader();\n        // The CubeTextureLoader load method takes an array of urls representing all 6 sides of the cube.\n        const texture = loader.load([\n          \"/1.png\",\n          \"/2.png\",\n          \"/3.png\",\n          \"/4.png\",\n          \"/5.png\",\n          \"/6.png\"\n        ]);\n      \n        // Set the scene background property to the resulting texture.\n        scene.background = texture;\n        return null;\n      }\n\n    useEffect(() => {\n        if(useOrbitCamera) {\n            set({ camera: orbitCamera.current });\n            setCameraIndex(1)\n        } else {\n            setCameraIndex(0)\n            set({ camera: thirdPersonCameraRef.current });\n        }\n    }, [useOrbitCamera])\n\n    const switchCamera = () => {\n        setUseOrbitCamera(!useOrbitCamera)\n    }\n\n    const setCameraTarget = (newTarget: meshRefObject) => {\n        if(!useOrbitCamera || newTarget === targetRef) {\n            return\n        }\n\n        const targetPos = orbitCameraRef.current.target.clone()\n        const cameraPos = orbitCamera.current.position.clone()\n\n        startingCameraTarget.copy(targetPos)\n        startingCameraPos.copy(cameraPos)\n\n        offSet.subVectors(cameraPos, targetPos)\n\n        lerpStart = Date.now()\n        lerping = true;\n        orbitCameraRef.current.target = targetPos\n        \n        targetRef = newTarget\n    }\n\n    window.addEventListener(\"keyup\", (event) => {\n        if( event.code === 'Space') {\n            setUseOrbitCamera(!useOrbitCamera)\n        }\n    })\n\n    useFrame((state, delts) => {\n        if(targetRef && targetRef.current && orbitCameraRef && orbitCameraRef.current) {\n\n            if (lerping) {\n                const targetPos = targetRef.current.position\n                const cameraPos = orbitCameraRef.current.object.position\n                \n                let now = Date.now()\n                let alpha = ((now-lerpStart)/(lerpTime*1000))\n                \n                orbitCameraRef.current.target.lerpVectors(startingCameraTarget, targetPos, alpha)\n                cameraPos.lerpVectors(startingCameraPos, new Vector3().addVectors(targetPos, offSet), alpha)\n                //cameraPos.lerpVectors(targetPos.clone().add(offSet), alpha)\n\n                if((now-lerpStart)>lerpTime*1000) {\n                    lerping = false;\n                }\n            } else {\n                orbitCameraRef.current.target = targetRef.current.position\n            }\n        }\n    }) \n\n    return (\n        <>\n            {/*<SkyBox/>*/}\n            {<ambientLight color={'white'} intensity={0.2} />}\n            <color attach=\"background\" args={[\"black\" as ColorRepresentation]} />\n            {<ThirdPersonCamera cameraRef={thirdPersonCameraRef} target={shipRef}/>}\n            \n            <PerspectiveCamera ref={orbitCamera} fov={75} position={orbitCameraPosition} far={6000000000}/>\n            <OrbitControls ref={orbitCameraRef} camera={orbitCamera.current}/>\n\n            <StarSystem cameraIndex={cameraIndex} orbitCamera={orbitCamera} thirdPersonCamera={thirdPersonCameraRef} setCameraTarget={setCameraTarget} time={3} seed={props.seed}/>\n            <Ship startingPosition={new Vector3(780000, 0, 0)} startingAngle={new Quaternion(0, 0, 0)} meshRef={shipRef} switchCamera={switchCamera} />\n            {/* multisampling = { 8 } DEFAULT ANTI-ALIASING SETTING*/}\n            {/* Posprocessing effect. Couldn't get it to work but should return later */}\n            {/* <PostProcessingEffects Atmospheres={[]} cameraRef={orbitCamera} />*/}\n        </>\n    );\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { createRoot } from 'react-dom/client'\nimport { Canvas } from '@react-three/fiber';\nimport Box from '@mui/material/Box';\nimport Scene from './Scene';\nimport { Stats } from '@react-three/drei';\nimport { Effect } from './helpers/PostProcessingComponent';\n\nexport default function App() {\n  const [key, setKey] = useState(0);\n  const [seed, setSeed] = useState('Ezra Bartlett');\n\n\n  function randomSeed(length: number) {\n      let result = '';\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      const charactersLength = characters.length;\n      let counter = 0;\n      while (counter < length) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n        counter += 1;\n      }\n      return result;\n  }\n\n  const resetScene = () => {\n    setKey(prevKey => prevKey===0? 1 : 0);\n  };\n\n  window.addEventListener(\"keyup\", (event) => {\n    if( event.code === 'KeyR') {\n        setSeed(randomSeed(10))\n        resetScene()\n    }\n})\n  \n  return (\n    <div id=\"canvas-container\">\n      <Box component=\"div\" sx={{ height: '1000px', width: '100%' }}>\n        <Canvas dpr={window.devicePixelRatio * 2} key={key} gl={{ logarithmicDepthBuffer: true, antialias: true }} camera={{ position: [0, 0, 200] , far: 10000000}}>\n          <Scene seed={seed}/>\n          <Stats/>\n          {/*<Effect />*/}\n        </Canvas>\n      </Box>\n    </div>\n  );\n}\n\n// @ts-ignore\ncreateRoot(document.getElementById('root')).render(<App />)","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}